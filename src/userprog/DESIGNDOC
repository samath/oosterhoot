		     +--------------------------+
         | CS 140	                  |
		     | PROJECT 2: USER PROGRAMS	|
		     | DESIGN DOCUMENT        	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sam Keller <samath@stanford.edu>
Lawrence Xing <lxing@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

Sam Keller: File syscalls, denying writes, syscall dispatcher
Lawrence Xing: Argument passing, user memory access, exec/wait/exit 

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

We read the Wikipedia page for file descriptors to verify the
behavior of file descriptor inheritance (specifically, they're not
shared).

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

pinfo is shared data between parent and child processes. The
cmd field is used for the parent to pass the command string to the child.

  struct pinfo
    {
      tid_t tid;
      struct thread *parent;               /* This thread's parent. NULL if
                                              the parent exited */
      enum process_status exec_state;      /* State of process's lifecycle */
      int exit_code;                       /* Exit code */
      char *cmd;                           /* Used in process_execute to pass
                                              the cmd args to the thread. 
                                              It's freed afterwards by 
                                              the parent,
                                              so don't use after
                                              initialization! */
      struct list_elem elem;               /* List elem */
  
      struct file *fp;                     /* Used to allow write access
                                              on file close. */
    };



---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Argument passing is done in two passes on the command string. First,
the parent in execute_process makes a copy of the string on a new page,
exiting if the command is too large to fit in a single page. It stores
the copy in the shared pinfo struct to the child. The child is
responsible for freeing this copy; if it can't start, then the parent
frees the copy.

When the child receives the command, it does a first pass on a copy
of the string in load(). This pass calls strtok_r() to

  - determine the first argument (the executable file name)
  - count the number of arguments in the command
  - compute the total length required for the argument words,
    including null characters

The latter two fields are passed to setup_stack() to aid in creating
the stack. setup_stack() then uses two pointers, arg_data to fill
out argument words and arg_ptrs to populate the return address, argc,
argv, and the pointers in argv[] that point to the argument words.
If the stack is too large to fit in a page, setup_stack() exits with
an error code.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() saves the progress of tokenization in between calls, whereas
the user must manually use a save_ptr to track the string for
strtok_r(). According to the man page for strtok, strtok() does
this with a static buffer that can be overwritten by other threads,
which is obviously a problem Pintos's multithreaded envirnment.
Thus strtok_r() is preferable.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Shell parsing means less kernel code, which is preferable given the
already large complexity of the kernel.



			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

process_status describes the life cycle of a process.

  enum process_status
    {
      PROCESS_STARTING,    /* Loading executable */
      PROCESS_RUNNING,     /* Running */
      PROCESS_DYING,       /* Completed execution */
      PROCESS_ORPHANED     /* No more parental responsibilities */
    };

A thread's pinfo contains a struct pinfo used for communicating with
its parent, if the parent exists.

A thread's children list contains a list of pinfo used for communicating
with its children.

The child_lock and child_done synchronization variables are used
to synchronize with child threads. Since the parent will only ever
wait on one child at a time, one of each is enough.

  struct thread
    {
      ...

      struct pinfo *pinfo;         /* This thread's process information */
      struct list children;        /* List of child process information */
      
      struct lock child_lock;      /* Lock for parent-child synchro */
      struct condition child_done;         /* Condvar for the same */
      
      ...
    };

pinfo is used for sharing data between parent and child processes.

  - tid contains the thread id (synonymous with pid) of the child.
  - parent contins a pointer to the parent thread struct.
  - exec_state indicates the progress of the child process.
  - exit_code indicates the child process's exit code.
  - cmd is used by the parent to pass the command args to the child.
  - elem is used for the parent to store a list of child processes.
  - fp points to the executable file. It's used by the child to deny
    access to other processes.


  struct pinfo
    {
      tid_t tid;
      struct thread *parent;               /* This thread's parent. NULL if
                                              the parent exited */
      enum process_status exec_state;      /* State of process's lifecycle */
      int exit_code;                       /* Exit code */
      char *cmd;                           /* Used in process_execute to pass
                                              the cmd args to the thread. 
                                              It's freed afterwards 
                                              by the parent,
                                              so don't use after
                                              initialization! */
      struct list_elem elem;               /* List elem */
  
      struct file *fp;                     /* Used to allow write access
                                              on file close. */
    };

The following 4 structs (file_with_lock, fpm_info, fdm_info, file_map)
are used to maintain information about currently open files and a mapping
between file descriptors and the original file pointers.

File_with_lock is used as a return value.  Each file is stored with its own
lock, and this allows syscall to use file-specific lock.

  struct file_with_lock 
    {
      struct file *fp;
      struct lock *lock;
    };

Fpm_info stores a file pointer and lock (as in the previous struct) and 
tracks the count of open file descriptors.

  struct fpm_info 
    {
      struct file *fp;
      int num_active;
      struct fpm_info* next;
      struct lock file_lock;
    };

Fdm_info stores information about a single fd and its associated 
file pointer, as well as identifying the owning thread. 

  struct fdm_info 
    {
      struct file *fp;
      tid_t thread_id;
      int fd;
      struct fdm_info *next;
    };

The syscall_handler contains a single instance of a file_map, which 
is used to track all open file pointers and file descriptors.

  struct file_map
    {
      struct fpm_info ** fp_map;
      struct fdm_info ** fd_map;
      int next_fd;
      struct lock file_map_lock;
    };

FD_TABLE_SIZE and FP_TABLE_SIZE define the size of the hash maps used 
in file_map.  Increasing either value improves performance at the cost of
higher memory use.

  #define FD_TABLE_SIZE 32
  #define FP_TABLE_SIZE 32
  #define BASE_FD 2


fm and filesys_lock are managed by the syscall_handler to store and 
synchronize file accesses.

  struct file_map *fm;
  struct lock filesys_lock;



>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?


The relationship between file descriptors and files is handled in 
file-map.c and file-map.h, using the structs defined above.
The system tracks a mapping from descriptors to file pointers and a list
of open files.

As a result, file descriptors are unique across the OS.  If a file
attempts to perform a system call on a file handle that it does not 
own, this will be caught and rejected by the file-map abstraction.



---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.


File reads and writes are handled by directly passing user buffers
into the corresponding file methods provided by filesys.h and file.h,
with the appropriate error-checking as described in B9.

The two special cases are input and output from stdin and stdout
in syscall_read and syscall_write, respectively. Upon detecting
the file descriptor for stdin, syscall_read loops on input_getc()
to collect size bytes from the input. When syscall_write is called
on the stdout file descriptor, syscall_write writes PUTBUF_MAX
chunks of the user-provided buffer at a time to console using
putbuf().


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?


Our method of verifying user memory accesses handles each argument 
passed into the kernel separately.  In this case, the most relevant 
comparison is to the buffer_valid function, which checks only the 
beginnning of the buffer and the beginning of each page which contains
part of the buffer.  Therefore checking a contiguous, 4096-byte buffer
will require either 1 or 2 calls to pagedir_get_page, depending on 
whether the buffer lies perfectly within a single page.

The same result is true of a 2-byte block; if it lies exactly on top of 
a page boundary, it requires two reads (since that boundary could represent
the edge of kernel space or the end of the mapped virtual memory).  
Otherwise, it can be handled in one (and our code does so).

There is no way to improve these statistics, since each individual page 
of virtual memory must be verified independently.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Each process termination passes h

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

In order to condense and aggregate error handling, we use two
policies:
  
  - all error detection of bad user data is done in one method,
    syscall_handler().
  - error handling invokes the same process shutdown calls that
    a correctly exiting process would make. This correctly frees
    the resources and avoids code duplication.

We use a validation system to check that the user data passed into
the kernel data is safe. This consists of

  - str_valid(), which checks that each byte in a string is in the
    user virtual address space and has a valid mapping.
  - buffer_valid(), which functions the same as str_valid() but
    operates faster because it is given the size of the buffer
    and thus can validate up to 4096 bytes at a time.
  - uptr_valid(), which calls buffer_valid() on a buffer of size
    4 bytes -- essentially validating a data pointer. 

Each of these validation methods also returns the translated kernel
virtual address of the user address, or NULL if it is invalid.

Error detection ALL occurs in syscall_handler(), using the stack from 
in f->esp. The kernel validates f->esp, and dereferences it to obtain  
system call number.

syscall_handler() then determines the argument count argc using a
static table based on the syscall number. It then validates,
translates, and dereferences this many arguments above f->esp
into a buffer.

Then depending on the syscall number, syscall_handler() uses a switch
statement to perform additional validation on the arguments; for
instance, validating the filename and buffer in a file write call.
If these pass, then it dispatches the appropriate system method
with the knowledge that no more error handling is needed.

There are three code paths where errors can come from: in
start_process if the executable file can't be loaded, in the page
fault handler on user page faults, and from syscall_handler() if
it detects bad user data. In all three cases, our error handling
policy dictates that the kernel uses process_cleanup() to free
any process-specific resources and exits the process immediately.


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

The parent uses the child_lock to wait for the child_done signal
from its spawned process, looping until the child escapes the
PROCESS_STARTING state. When it progresses, the child has either
loaded the file or failed and set its exit code in the shared
pinfo struct accordingly, which the parent can use to determine
the success of the load.

A newly initialized process begins in the PROCESS_STARTING enum
state until it has successfully loaded the executable, at which
point it changes to PROCESS_RUNNING. If the load fails, instead
it exits normally, which automatically changes its status to
PROCESS_DYING and sets the exit code. In both cases, the process
signals to the blocking parent.


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

There are 

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?


Because of the limitations on the user data that is ever touched by the 
kernel, it is simplest to have the safe memory access functionality
built directly into the syscall handler.
The value of esp and the individual arguments must be validated right away,
and the validity of specific pointer-type arguments can be verified as 
soon as the type of system call is known.
This form of validation makes it easy to halt the system call and kill
the offending thread as soon as the error is noticed.

The actual validation is designed to minimize the amount of reads that 
need to be done from the page table (see B4).  Our implementation 
uses the fact that page boundaries align with addresses that are a 
multiple of PGSIZE to do the minimum amount of comparisons possible.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

We hid the mapping from files to file descriptors underneath the 
file-map abstraction.  It is primarily designed for efficiency:

The list of open files and the list of open file descriptors are each
maintained in separate hash maps, the size of which can be varied 
based on the expected load on the system and a performance - memory
overhead tradeoff.  Because the amount of memory held for each is so 
low, it is easy to get high performance even with large number of
processes or file descriptors.

However, because all file information is stored globally, this would
not be as effective on a multi-threaded machine, when the
synchronization overhead becomes higher.

The implementation is also simpler because it removes a lot of
complexity from the processes themselves.  They are never exposed to
file pointers, and all of the cleanup (for example, automatically
closing files on the death of the thread) can happen without 
participation from the thread or even after its memory has been
deallocated.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We used the default mapping.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
